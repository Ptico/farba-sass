@use "sass:math";
@use "../../algebra" as alg;
@use "../../space/oklab" as oklab;

// $COEFF and $LMStoRGB must be set in a corresponding
// color space
$OKLabtoLMS: oklab.$OKLabtoLMS;

// Finds intersection of the line
@function find-gamut-intersection($a, $b, $L1, $C1, $L0, $cusp) {
  $cusp0: nth($cusp, 1);
  $cusp1: nth($cusp, 2);

  $t: null;

  @if ((($L1 - $L0) * $cusp1 - ($cusp0 - $L0) * $C1) <= 0) {
    $t: math.div($cusp1 * $L0, ($C1 * $cusp0 + $cusp1 * ($L0 - $L1)));
  } @else {
    $t: math.div($cusp1 * ($L0 - 1), ($C1 * ($cusp0 - 1) + $cusp1 * ($L0 - $L1)));

    $dL: $L1 - $L0;
    $dC: $C1;

    $kl: nth(nth($OKLabtoLMS, 1), 2) * $a + nth(nth($OKLabtoLMS, 1), 3) * $b;
    $km: nth(nth($OKLabtoLMS, 2), 2) * $a + nth(nth($OKLabtoLMS, 2), 3) * $b;
    $ks: nth(nth($OKLabtoLMS, 3), 2) * $a + nth(nth($OKLabtoLMS, 3), 3) * $b;

    $ldt: $dL + $dC * $kl;
    $mdt: $dL + $dC * $km;
    $sdt: $dL + $dC * $ks;

    $L: $L0 * (1 - $t) + $t * $L1;
    $C: $t * $C1;

    $l_: $L + $C * $kl;
    $m_: $L + $C * $km;
    $s_: $L + $C * $ks;

    $l: math.pow($l_, 3);
    $m: math.pow($m_, 3);
    $s: math.pow($s_, 3);

    $ldt: 3 * $ldt * $l_ * $l_;
    $mdt: 3 * $mdt * $m_ * $m_;
    $sdt: 3 * $sdt * $s_ * $s_;

    $ldt2: 6 * $ldt * $ldt * $l_;
    $mdt2: 6 * $mdt * $mdt * $m_;
    $sdt2: 6 * $sdt * $sdt * $s_;

    $r0: alg.v-dot(nth($LMStoRGB, 1), ($l $m $s)) - 1;
    $r1: alg.v-dot(nth($LMStoRGB, 1), ($ldt $mdt $sdt));
    $r2: alg.v-dot(nth($LMStoRGB, 1), ($ldt2 $mdt2 $sdt2));

    $ur: math.div($r1, $r1 * $r1 - 0.5 * $r0 * $r2);
    $tr: -$r0 * $ur;

    $g0: alg.v-dot(nth($LMStoRGB, 2), ($l $m $s)) - 1;
    $g1: alg.v-dot(nth($LMStoRGB, 2), ($ldt $mdt $sdt));
    $g2: alg.v-dot(nth($LMStoRGB, 2), ($ldt2 $mdt2 $sdt2));

    $ug: math.div($g1, $g1 * $g1 - 0.5 * $g0 * $g2);
    $tg: -$g0 * $ug;

    $b0: alg.v-dot(nth($LMStoRGB, 3), ($l $m $s)) - 1;
    $b1: alg.v-dot(nth($LMStoRGB, 3), ($ldt $mdt $sdt));
    $b2: alg.v-dot(nth($LMStoRGB, 3), ($ldt2 $mdt2 $sdt2));

    $ub: math.div($b1, $b1 * $b1 - 0.5 * $b0 * $b2);
    $tb: -$b0 * $ub;

    $tr: if($ur >= 0, $tr, 1000000); // TODO
    $tg: if($ug >= 0, $tg, 1000000);
    $tb: if($ub >= 0, $tb, 1000000);

    $t: $t + math.min($tr, math.min($tg, $tb));
  }

  @return $t;
}

// Finds the maximum saturation possible for a given hue that fits in gamut.
@function compute-max-saturation($a, $b) {
  $coeff_r: map-get($COEFF, "r");
  $coeff_g: map-get($COEFF, "g");
  $coeff_b: map-get($COEFF, "b");

  // Max saturation will be when one of r, g or b goes below zero.
  // Select different coefficients depending on which component goes below zero first.

  // Use blue component by default
  // TODO - what if blue limit doesn't match?
  $Kn: map-get($coeff_b, "Kn");
  $W: nth($LMStoRGB, 3);

  @if (alg.v-dot(map-get($coeff_r, "limit"), ($a $b)) > 1) {
    // Red component
    $Kn: map-get($coeff_r, "Kn");
    $W: nth($LMStoRGB, 1);
  } @else if (alg.v-dot(map-get($coeff_g, "limit"), ($a $b)) > 1) {
    // Green component
    $Kn: map-get($coeff_g, "Kn");
    $W: nth($LMStoRGB, 2);
  }

  $k0: nth($Kn, 1);
  $k1: nth($Kn, 2);
  $k2: nth($Kn, 3);
  $k3: nth($Kn, 4);
  $k4: nth($Kn, 5);

  $wl: nth($W, 1);
  $wm: nth($W, 2);
  $ws: nth($W, 3);

  // Approximate max saturation using a polynomial:
  $S: $k0 + $k1 * $a + $k2 * $b + $k3 * $a * $a + $k4 * $a * $b;

  $kl: nth(nth($OKLabtoLMS, 1), 2) * $a + nth(nth($OKLabtoLMS, 1), 3) * $b;
  $km: nth(nth($OKLabtoLMS, 2), 2) * $a + nth(nth($OKLabtoLMS, 2), 3) * $b;
  $ks: nth(nth($OKLabtoLMS, 3), 2) * $a + nth(nth($OKLabtoLMS, 3), 3) * $b;

  $l_: 1 + $S * $kl;
  $m_: 1 + $S * $km;
  $s_: 1 + $S * $ks;

  $l: math.pow($l_, 3);
  $m: math.pow($m_, 3);
  $s: math.pow($s_, 3);

  $ldS: 3 * $kl * $l_ * $l_;
  $mdS: 3 * $km * $m_ * $m_;
  $sdS: 3 * $ks * $s_ * $s_;

  $ldS2: 6 * $kl * $kl * $l_;
  $mdS2: 6 * $km * $km * $m_;
  $sdS2: 6 * $ks * $ks * $s_;

  $f0: $wl * $l    + $wm * $m    + $ws * $s;
  $f1: $wl * $ldS  + $wm * $mdS  + $ws * $sdS;
  $f2: $wl * $ldS2 + $wm * $mdS2 + $ws * $sdS2;

  @return $S - math.div($f0 * $f1, $f1 * $f1 - 0.5 * $f0 * $f2);
}

// Convert from Oklab to linear RGB (sRGB/P3) using corresponding
// matrices
@function oklab-to-linear-rgb($L, $a, $b) {
  $lms: oklab.to-lms($L $a $b);

  $l: nth($lms, 1);
  $m: nth($lms, 2);
  $s: nth($lms, 3);

  @return alg.vm-dot(($l $m $s), $LMStoRGB);
}

// Finds L_cusp and C_cusp for a given hue
@function find-cusp($a, $b) {
  $Scusp: compute-max-saturation($a, $b);

  $rgbAtMax: oklab-to-linear-rgb(1, $Scusp * $a, $Scusp * $b);

  $r: nth($rgbAtMax, 1);
  $g: nth($rgbAtMax, 2);
  $b: nth($rgbAtMax, 3);

  $Lcusp: alg.cbrt(
    math.div(1, math.max(math.max($r, $g), $b))
  );

  $Ccusp: $Lcusp * $Scusp;

  @return ($Lcusp, $Ccusp);
}
